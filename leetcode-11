/*
11. Container With Most Water (Medium)

You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.

Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

Example 2:
Input: height = [1,1]
Output: 1

Constraints:
n == height.length
2 <= n <= 105
0 <= height[i] <= 104

Question asked by companies: Google, Adobe, Amazon, meta, Bloomberg. 

time complexity: O(n)
Runtime: 0ms
Beats: 100.00%

space complexity: O(1)
Memory: 61.57MB
Beats: 91.79%

code: 
*/

class Solution {
public:
    int maxArea(vector<int>& height) {
        int l = 0;
        int r = height.size()-1;
        int mx = INT_MIN;
        while(r > l){
            int a = height[l];
            int b = height[r];
            int c = 0;
            if(a <= b){
                c = a;
            }else{
                c = b;
            }
            c = c*(r-l);
            if(c > mx){
                mx = c;
            }
            if(height[l] > height[r]){
                r--;
            }else{
                l++;
            }
        }
        return mx;
    }
};
