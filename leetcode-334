/* 
334. Increasing Triplet Subsequence
Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

Example 1:
Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.

Example 2:
Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.

Example 3:
Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.
 
Constraints:
1 <= nums.length <= 5 * 105
-231 <= nums[i] <= 231 - 1

question asked by companies : Facebook, Amazon, Factset, Walmart.

time complexity : O(n)
Runtime :0ms
Beats 100.00%

space complexity: O(1)
Memory: 114.29 MB
Beats 97.36%

code:- */

class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int a = INT_MAX;
        int b = INT_MAX;
        int c = INT_MAX;
        for(int i=0; i<nums.size(); i++){
            if(nums[i] < a){
                a = nums[i];
                continue;
            }
            if(nums[i] > b ){
                c = nums[i];
                return true;
            }
            if(nums[i] > a){
                b = nums[i];
                continue;
            }
        }
        return false;
    }
};
