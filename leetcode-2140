/*
2140. Solving Questions With Brainpower (Medium)

Topics - Array, DP.

You are given a 0-indexed 2D integer array questions where questions[i] = [pointsi, brainpoweri].
The array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question 0) and make a decision whether to solve or skip 
each question. Solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions. If you skip question i, you get to make 
the decision on the next question.

For example, given questions = [[3, 2], [4, 3], [4, 4], [2, 5]]:
If question 0 is solved, you will earn 3 points but you will be unable to solve questions 1 and 2.
If instead, question 0 is skipped and question 1 is solved, you will earn 4 points but you will be unable to solve questions 2 and 3.
Return the maximum points you can earn for the exam.

Example 1:
Input: questions = [[3,2],[4,3],[4,4],[2,5]]
Output: 5
Explanation: The maximum points can be earned by solving questions 0 and 3.
- Solve question 0: Earn 3 points, will be unable to solve the next 2 questions
- Unable to solve questions 1 and 2
- Solve question 3: Earn 2 points
Total points earned: 3 + 2 = 5. There is no other way to earn 5 or more points.

Example 2:
Input: questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]
Output: 7
Explanation: The maximum points can be earned by solving questions 1 and 4.
- Skip question 0
- Solve question 1: Earn 2 points, will be unable to solve the next 2 questions
- Unable to solve questions 2 and 3
- Solve question 4: Earn 5 points
Total points earned: 2 + 5 = 7. There is no other way to earn 7 or more points.

Constraints:
1 <= questions.length <= 105
questions[i].length == 2
1 <= pointsi, brainpoweri <= 105

Question asked by companies: Google. 

time complexity: O(n)
Runtime: 8ms
Beats: 44.27%

space complexity: O(1)
Memory: 127.41MB
Beats: 32.73%

code: 
*/

class Solution {
public:
    int n;
    long long solve(int i, vector<vector<int>>& q, vector<long long>& t){
        if(i >= n){
            return 0;
        }
        if(t[i] != -1){
            return t[i];
        }
        long long taken = q[i][0] + solve(i+q[i][1]+1, q, t);
        long long nottaken = solve(i+1, q, t);

        return t[i] = max(taken, nottaken);
    }
    long long mostPoints(vector<vector<int>>& q) {
       n =  q.size();
       vector<long long> t(n+1, -1);
       return solve(0, q, t);
    }
};
