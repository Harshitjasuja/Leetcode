/*
368. Largest Divisible Subset (Medium)
 
Topics - Array, Math, Dynamic Programming, Sorting
 
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:
answer[i] % answer[j] == 0, or answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

Example 1:
Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.

Example 2:
Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 
Constraints:
1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.

Question asked by companies: Google.

time complexity: O(n)
Runtime: 11ms
Beats: 68.82%

space complexity: O(1)
Memory: 12.59MB
Beats: 67.51%

code: 
*/

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        sort(begin(nums), end(nums));
        vector<int> dp(n, 1);
        vector<int>prev(n, -1);
        int lci = 0; // last choosen index
        int mx = 1;
        for(int i=1; i<n; i++){
            for(int j=0; j<i; j++){
                if(nums[i]%nums[j] == 0){
                    if(dp[i] < dp[j]+1){
                        dp[i] = dp[j]+1;
                        prev[i] = j;
                    }
                    if(dp[i] > mx){
                        mx = dp[i];
                        lci = i;
                    }
                }
            }
        }
        vector<int> res;
        while(lci != -1){
            res.push_back(nums[lci]);
            lci = prev[lci];
        }
        return res;
    }
};
