/*
64. Minimum Path Sum (Medium)

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.

Example 1:
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

Example 2:
Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 
Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 200

Topics - Math, Dynamic Programming, Matrix.

Question asked by companies: Google, Amazon, Paytm, LinkedIn.

time complexity: O(n x m)
Runtime: 0ms
Beats: 100.00%

space complexity: O((n-1)+(m-1)) + O(n x m)
Memory: 16.29MB
Beats: 56.43%

method -> Memoization (dp)

code: 
*/

class Solution {
public:
    int solve(vector<vector<int>>& grid,int i, int j, vector<vector<int>>& dp){
        if(i < 0 || j < 0) return INT_MAX;
        if(i == 0 && j == 0) return grid[i][j];

        if(dp[i][j] != -1) return dp[i][j];

        int up = solve(grid, i-1, j, dp);
        int left = solve(grid, i, j-1, dp);
        int mn = min(up, left);
        return dp[i][j] = grid[i][j] + mn;
    }   
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();            
        int n = grid[0].size(); 
        vector<vector<int>> dp(m, vector<int> (n, -1));
        int ans = solve(grid,m-1, n-1, dp);
        return ans;
    }
};
