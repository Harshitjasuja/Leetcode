/*
1004. Max Consecutive Ones III (Medium)

Topics - Array, Binary Search, Sliding Window, Prefix Sum
 
Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Example 1:
Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

Example 2:
Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

Constraints:
1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length

time complexity: O(n)
Runtime: 0ms
Beats: 100.00%

space complexity: O(1)
Memory: 58.17MB
Beats: 67.84%

code: 
*/

class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int mx = 0, z = 0;
        int l = 0, r = 0;   
        while(r < nums.size() && l<=r){
            if(nums[r] == 0){
                z++;
            }
            if(z > k){
                if(nums[l] == 0){
                    z--;
                }
                l++;
            }
            mx = max(mx, r-l+1);
            r++;
        }
        return mx;
    }
};
