/*
198. House Robber (Medium)

Topics - Array, Dynamic Programming

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses 
have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.
Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

Example 1:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

Example 2:
Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.

Constraints:
1 <= nums.length <= 100
0 <= nums[i] <= 400

Question asked by companies: Google, Walmart, Amazon, Flipkart, Paytm, OYO, Airbnb, Makemytrip, Linkedin. 

time complexity: O(n)
Runtime: 0ms
Beats: 100.00%

space complexity: O(1)
Memory: 10.06MB
Beats: 89.77%

code: 
*/

class Solution {
public:
    int solve(vector<int>&nums){
        int n = nums.size();
        int prev = nums[0];
        int prev2 = 0;
        for(int i=1; i<n; i++){
            int take = nums[i];
            if(i > 1) take+= prev2;

            int nottake = 0 + prev;

            int curi = max(take, nottake);
            prev2 = prev;
            prev = curi;
        }
        return prev;
    }
    int rob(vector<int>& nums) {
        return solve(nums);
    }
};
