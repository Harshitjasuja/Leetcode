/*
151. Reverse Words in a String (Medium)

Given an input string s, reverse the order of the words.
A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.
Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

Example 1:
Input: s = "the sky is blue"
Output: "blue is sky the"

Example 2:
Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.

Example 3:
Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 
Constraints:
1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.

question asked by companies: Microsoft, Amazon, GoldmanSachs, Samsung, Adobe, Makemytrip, Paytm, Mentor, AccoliteDigital.

time complexity: O(n)
Runtime: 2ms
Beats: 82.97%

space complexity: O(n)
Memory: 10.14MB
Beats: 51.96%

code: 
*/

class Solution {
public:
    string reverseWords(string s) {
        int n = s.length();
        vector<string> rs;
        if(n==0){
            return s;
        }
        int i = 0;
        string s1;
        while(i<n){
            if(s[i] != ' '){
               s1 += s[i];
            }
            else if(!s1.empty()){
                rs.push_back(s1);
                s1="";
            }
            i++;
        }
        if(!s1.empty()){
            rs.push_back(s1);
        }
        int m = rs.size();
        string res;
        for (int i = rs.size() - 1; i >= 0; i--) {
            res += rs[i];
            if (i != 0) {
                res += " ";  
            }
        }
        return res;
    }
};
