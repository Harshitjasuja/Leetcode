/*
2342. Max Sum of a Pair With Equal Sum of Digits (Medium)

You are given a 0-indexed array nums consisting of positive integers. You can choose two indices i and j, such that i != j, and the sum of digits of the number nums[i] is equal 
to that of nums[j].
Return the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions.

Example 1:
Input: nums = [18,43,36,13,7]
Output: 54
Explanation: The pairs (i, j) that satisfy the conditions are:
- (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.
- (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.
So the maximum sum that we can obtain is 54.

Example 2:
Input: nums = [10,12,19,14]
Output: -1
Explanation: There are no two numbers that satisfy the conditions, so we return -1.

Constraints:
1 <= nums.length <= 105
1 <= nums[i] <= 109

Question asked by companies: Google, Adobe, Amazon, meta, Bloomberg. 

time complexity: O(n)
Runtime: 19ms
Beats: 76.31%

space complexity: O(1)
Memory: 63.82MB
Beats: 75.41%

code: 
*/

class Solution {
public:
    int sum(int a){
        int res = 0;
        while(a > 0){
            res += a%10;
            a = a/10;
        }
        return res;
    }
    int maximumSum(vector<int>& nums) {
        unordered_map<int, int> rec; // record;
        int ans = -1;
        for(int &num : nums){
            int ds = sum(num); // digit sum
            if(rec.count(ds)){
                ans = max(ans, rec[ds] + num);
                rec[ds] = max(rec[ds], num);
            }else{
                rec[ds] = num;
            }
        }
        return ans;
    }
};
