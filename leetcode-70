/*
70. Climbing Stairs (Easy)

Topics - Math, Dynamic Programming, Memoization

You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Constraints:
1 <= n <= 45

1st approach - Memoization
time complexity: O(n)
Runtime: 0ms
Beats: 100.00%

space complexity: O(n)
Memory: 8.51MB
Beats: 33.88%

code: 
*/

class Solution {
public:
    int solve(int n, vector<int> &dp){
        if(n==1 || n==2){
            return n;
        }
        if(dp[n] != -1){
            return dp[n];
        }
        return dp[n] = solve(n-2, dp)+solve(n-1, dp);
    }
    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        return solve(n, dp);
    }
};

/*
2nd approach 
time complexity: O(n)
Runtime: 0ms
Beats: 100.00%

space complexity: O(1)
Memory: 7.63MB
Beats: 98.44%
*/

class Solution {
public:
    int climbStairs(int n) {
        if (n <= 2) return n;

        int prev1 = 2;
        int prev2 = 1;

        int res;

        for(int i=3; i<=n; i++){
            res = prev2 + prev1;
            prev2 = prev1;
            prev1 = res; 
        }

        return res;
    }
};
